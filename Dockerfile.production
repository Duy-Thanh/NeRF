# Production Build Dockerfile
FROM ubuntu:22.04

# Install build dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    cmake \
    git \
    pkg-config \
    libhiredis-dev \
    libgrpc++-dev \
    libprotobuf-dev \
    protobuf-compiler-grpc \
    libcpprest-dev \
    libssl-dev \
    libboost-all-dev \
    wget \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Set working directory
WORKDIR /build

# Copy source code
COPY framework/ ./framework/
COPY *.py ./
COPY *.md ./

# Create build directory
RUN mkdir -p framework/build

# Set environment variables for production build
ENV CXX=g++
ENV CXXFLAGS="-std=c++17 -O3 -DPRODUCTION_BUILD"
ENV LDFLAGS="-static-libgcc -static-libstdc++"

# Build the production system
WORKDIR /build/framework/build

# Configure with CMake for production
RUN cmake .. \
    -DCMAKE_BUILD_TYPE=Release \
    -DUSE_REAL_REDIS=ON \
    -DUSE_REAL_HTTP=ON \
    -DUSE_GRPC=ON \
    -DCMAKE_CXX_FLAGS="${CXXFLAGS}" \
    -DCMAKE_EXE_LINKER_FLAGS="${LDFLAGS}"

# Build all components
RUN make -j$(nproc)

# Create deployment artifacts
RUN mkdir -p /artifacts
RUN cp coordinator_production /artifacts/
RUN cp worker_production /artifacts/
RUN cp ../docker/docker-compose.production.yml /artifacts/
RUN cp ../../*.py /artifacts/

# Production runtime stage
FROM ubuntu:22.04 as runtime

# Install runtime dependencies only
RUN apt-get update && apt-get install -y \
    libhiredis0.14 \
    libgrpc++1 \
    libprotobuf23 \
    libcpprest2.10 \
    libssl3 \
    && rm -rf /var/lib/apt/lists/*

# Copy built artifacts
COPY --from=0 /artifacts/* /app/

WORKDIR /app

# Set runtime configuration
ENV REDIS_HOST=redis
ENV REDIS_PORT=6379
ENV COORDINATOR_PORT=8080
ENV GRPC_PORT=50051

# Expose ports
EXPOSE 8080 50051

# Default command
CMD ["./coordinator_production"]